// OAuth specific parts of Goliath
//
// Author: torstein
package iam

import (
	"crypto/rand"
	"fmt"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

// From RFC 7519, section 4.1: https://www.rfc-editor.org/rfc/rfc7519#section-4.1
const (
	ClaimIssuer         Claim = "iss"
	ClaimExpirationTime Claim = "exp"
	ClaimIssuedAt       Claim = "iat"
)

// The server side code parameter comes from the OAuth2 spec,
// it's generated by the server
func GenerateServerCode() string {
	return rand.Text()
}

func AccessToken(iss string, exp time.Time) (string, error) {
	// TODO read signing key from conf
	mySigningKey := []byte("AllYourBase")
	token := jwt.NewWithClaims(
		jwt.SigningMethodHS256,
		jwt.MapClaims{
			string(ClaimIssuedAt):       time.Now().Unix(),
			string(ClaimExpirationTime): exp.Unix(),
			string(ClaimIssuer):         iss,
		})
	ss, err := token.SignedString(mySigningKey)
	fmt.Println(ss, err)
	return ss, err
}

func RefreshToken(iss string, exp time.Time) (string, error) {
	// TODO read signing key from conf
	mySigningKey := []byte("AllYourBase")
	token := jwt.NewWithClaims(
		jwt.SigningMethodHS256,
		jwt.MapClaims{
			string(ClaimIssuedAt):       time.Now().Unix(),
			string(ClaimExpirationTime): exp.Unix(),
			string(ClaimIssuer):         iss,
		})
	ss, err := token.SignedString(mySigningKey)
	fmt.Println(ss, err)
	return ss, err
}
